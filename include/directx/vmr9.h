/*** Autogenerated by WIDL 0.9.44 from vmr9.idl - Do not edit ***/
#include <rpc.h>
#include <rpcndr.h>

#ifndef __WIDL_VMR9_H
#define __WIDL_VMR9_H
#ifdef __cplusplus
extern "C" {
#endif
#include <unknwn.h>
DEFINE_GUID(CLSID_VideoMixingRenderer9,  0x51b4abf3, 0x748f, 0x4e3b, 0xa2, 0x76, 0xc8, 0x28, 0x33, 0x0e, 0x92, 0x6a);
typedef enum __WIDL_vmr9_generated_name_00000000 {
    VMR9Mode_Windowed = 0x1,
    VMR9Mode_Windowless = 0x2,
    VMR9Mode_Renderless = 0x4,
    VMR9Mode_Mask = 0x7
} VMR9Mode;
typedef enum __WIDL_vmr9_generated_name_00000001 {
    ProcAmpControl9_Brightness = 0x1,
    ProcAmpControl9_Contrast = 0x2,
    ProcAmpControl9_Hue = 0x4,
    ProcAmpControl9_Saturation = 0x8,
    ProcAmpControl9_Mask = 0xf
} VMR9ProcAmpControlFlags;
typedef struct __WIDL_vmr9_generated_name_00000002 {
    float left;
    float top;
    float right;
    float bottom;
} VMR9NormalizedRect;
typedef struct _VMR9ProcAmpControl {
    DWORD dwSize;
    DWORD dwFlags;
    float Contrast;
    float Brightness;
    float Hue;
    float Saturation;
} VMR9ProcAmpControl;
typedef struct _VMR9ProcAmpControlRange {
    DWORD dwSize;
    VMR9ProcAmpControlFlags dwProperty;
    float MinValue;
    float MaxValue;
    float DefaultValue;
    float StepSize;
} VMR9ProcAmpControlRange;

/*http://msdn.microsoft.com/en-us/library/dd407361%28VS.85%29.aspx*/
typedef enum  {
  VMR9ARMode_None,
  VMR9ARMode_LetterBox 
} VMR9AspectRatioMode;

#ifndef __IVMRWindowlessControl9_FWD_DEFINED__
#define __IVMRWindowlessControl9_FWD_DEFINED__
typedef interface IVMRWindowlessControl9 IVMRWindowlessControl9;
#endif

/*****************************************************************************
 * IVMRWindowlessControl9 interface
 */
#ifndef __IVMRWindowlessControl9_INTERFACE_DEFINED__
#define __IVMRWindowlessControl9_INTERFACE_DEFINED__

DEFINE_GUID(IID_IVMRWindowlessControl9, 0x8f537d09, 0xf85e, 0x4414, 0xb2,0x3b, 0x50,0x2e,0x54,0xc7,0x99,0x27);
#if defined(__cplusplus) && !defined(CINTERFACE)
interface IVMRWindowlessControl9 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetNativeVideoSize(
        LONG *lpWidth,
        LONG *lpHeight,
        LONG *lpARWidth,
        LONG *lpARHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMinIdealVideoSize(
        LONG *lpWidth,
        LONG *lpHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMaxIdealVideoSize(
        LONG *lpWidth,
        LONG *lpHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetVideoPosition(
        const LPRECT lpSRCRect,
        const LPRECT lpDSTRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVideoPosition(
        LPRECT lpSRCRect,
        LPRECT lpDSTRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAspectRatioMode(
        DWORD *lpAspectRatioMode) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAspectRatioMode(
        DWORD AspectRatioMode) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetVideoClippingWindow(
        HWND hwnd) = 0;

    virtual HRESULT STDMETHODCALLTYPE RepaintVideo(
        HWND hwnd,
        HDC hdc) = 0;

    virtual HRESULT STDMETHODCALLTYPE DisplayModeChanged(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCurrentImage(
        BYTE **lpDib) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBorderColor(
        COLORREF Clr) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBorderColor(
        COLORREF *lpClr) = 0;

};
#else
typedef struct IVMRWindowlessControl9Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IVMRWindowlessControl9* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IVMRWindowlessControl9* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IVMRWindowlessControl9* This);

    /*** IVMRWindowlessControl9 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetNativeVideoSize)(
        IVMRWindowlessControl9* This,
        LONG *lpWidth,
        LONG *lpHeight,
        LONG *lpARWidth,
        LONG *lpARHeight);

    HRESULT (STDMETHODCALLTYPE *GetMinIdealVideoSize)(
        IVMRWindowlessControl9* This,
        LONG *lpWidth,
        LONG *lpHeight);

    HRESULT (STDMETHODCALLTYPE *GetMaxIdealVideoSize)(
        IVMRWindowlessControl9* This,
        LONG *lpWidth,
        LONG *lpHeight);

    HRESULT (STDMETHODCALLTYPE *SetVideoPosition)(
        IVMRWindowlessControl9* This,
        const LPRECT lpSRCRect,
        const LPRECT lpDSTRect);

    HRESULT (STDMETHODCALLTYPE *GetVideoPosition)(
        IVMRWindowlessControl9* This,
        LPRECT lpSRCRect,
        LPRECT lpDSTRect);

    HRESULT (STDMETHODCALLTYPE *GetAspectRatioMode)(
        IVMRWindowlessControl9* This,
        DWORD *lpAspectRatioMode);

    HRESULT (STDMETHODCALLTYPE *SetAspectRatioMode)(
        IVMRWindowlessControl9* This,
        DWORD AspectRatioMode);

    HRESULT (STDMETHODCALLTYPE *SetVideoClippingWindow)(
        IVMRWindowlessControl9* This,
        HWND hwnd);

    HRESULT (STDMETHODCALLTYPE *RepaintVideo)(
        IVMRWindowlessControl9* This,
        HWND hwnd,
        HDC hdc);

    HRESULT (STDMETHODCALLTYPE *DisplayModeChanged)(
        IVMRWindowlessControl9* This);

    HRESULT (STDMETHODCALLTYPE *GetCurrentImage)(
        IVMRWindowlessControl9* This,
        BYTE **lpDib);

    HRESULT (STDMETHODCALLTYPE *SetBorderColor)(
        IVMRWindowlessControl9* This,
        COLORREF Clr);

    HRESULT (STDMETHODCALLTYPE *GetBorderColor)(
        IVMRWindowlessControl9* This,
        COLORREF *lpClr);

    END_INTERFACE
} IVMRWindowlessControl9Vtbl;
interface IVMRWindowlessControl9 {
    CONST_VTBL IVMRWindowlessControl9Vtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IVMRWindowlessControl9_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IVMRWindowlessControl9_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IVMRWindowlessControl9_Release(p) (p)->lpVtbl->Release(p)
/*** IVMRWindowlessControl9 methods ***/
#define IVMRWindowlessControl9_GetNativeVideoSize(p,a,b,c,d) (p)->lpVtbl->GetNativeVideoSize(p,a,b,c,d)
#define IVMRWindowlessControl9_GetMinIdealVideoSize(p,a,b) (p)->lpVtbl->GetMinIdealVideoSize(p,a,b)
#define IVMRWindowlessControl9_GetMaxIdealVideoSize(p,a,b) (p)->lpVtbl->GetMaxIdealVideoSize(p,a,b)
#define IVMRWindowlessControl9_SetVideoPosition(p,a,b) (p)->lpVtbl->SetVideoPosition(p,a,b)
#define IVMRWindowlessControl9_GetVideoPosition(p,a,b) (p)->lpVtbl->GetVideoPosition(p,a,b)
#define IVMRWindowlessControl9_GetAspectRatioMode(p,a) (p)->lpVtbl->GetAspectRatioMode(p,a)
#define IVMRWindowlessControl9_SetAspectRatioMode(p,a) (p)->lpVtbl->SetAspectRatioMode(p,a)
#define IVMRWindowlessControl9_SetVideoClippingWindow(p,a) (p)->lpVtbl->SetVideoClippingWindow(p,a)
#define IVMRWindowlessControl9_RepaintVideo(p,a,b) (p)->lpVtbl->RepaintVideo(p,a,b)
#define IVMRWindowlessControl9_DisplayModeChanged(p) (p)->lpVtbl->DisplayModeChanged(p)
#define IVMRWindowlessControl9_GetCurrentImage(p,a) (p)->lpVtbl->GetCurrentImage(p,a)
#define IVMRWindowlessControl9_SetBorderColor(p,a) (p)->lpVtbl->SetBorderColor(p,a)
#define IVMRWindowlessControl9_GetBorderColor(p,a) (p)->lpVtbl->GetBorderColor(p,a)
#endif

#endif

HRESULT CALLBACK IVMRWindowlessControl9_GetNativeVideoSize_Proxy(
    IVMRWindowlessControl9* This,
    LONG *lpWidth,
    LONG *lpHeight,
    LONG *lpARWidth,
    LONG *lpARHeight);
void __RPC_STUB IVMRWindowlessControl9_GetNativeVideoSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetMinIdealVideoSize_Proxy(
    IVMRWindowlessControl9* This,
    LONG *lpWidth,
    LONG *lpHeight);
void __RPC_STUB IVMRWindowlessControl9_GetMinIdealVideoSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetMaxIdealVideoSize_Proxy(
    IVMRWindowlessControl9* This,
    LONG *lpWidth,
    LONG *lpHeight);
void __RPC_STUB IVMRWindowlessControl9_GetMaxIdealVideoSize_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_SetVideoPosition_Proxy(
    IVMRWindowlessControl9* This,
    const LPRECT lpSRCRect,
    const LPRECT lpDSTRect);
void __RPC_STUB IVMRWindowlessControl9_SetVideoPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetVideoPosition_Proxy(
    IVMRWindowlessControl9* This,
    LPRECT lpSRCRect,
    LPRECT lpDSTRect);
void __RPC_STUB IVMRWindowlessControl9_GetVideoPosition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetAspectRatioMode_Proxy(
    IVMRWindowlessControl9* This,
    DWORD *lpAspectRatioMode);
void __RPC_STUB IVMRWindowlessControl9_GetAspectRatioMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_SetAspectRatioMode_Proxy(
    IVMRWindowlessControl9* This,
    DWORD AspectRatioMode);
void __RPC_STUB IVMRWindowlessControl9_SetAspectRatioMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_SetVideoClippingWindow_Proxy(
    IVMRWindowlessControl9* This,
    HWND hwnd);
void __RPC_STUB IVMRWindowlessControl9_SetVideoClippingWindow_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_RepaintVideo_Proxy(
    IVMRWindowlessControl9* This,
    HWND hwnd,
    HDC hdc);
void __RPC_STUB IVMRWindowlessControl9_RepaintVideo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_DisplayModeChanged_Proxy(
    IVMRWindowlessControl9* This);
void __RPC_STUB IVMRWindowlessControl9_DisplayModeChanged_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetCurrentImage_Proxy(
    IVMRWindowlessControl9* This,
    BYTE **lpDib);
void __RPC_STUB IVMRWindowlessControl9_GetCurrentImage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_SetBorderColor_Proxy(
    IVMRWindowlessControl9* This,
    COLORREF Clr);
void __RPC_STUB IVMRWindowlessControl9_SetBorderColor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRWindowlessControl9_GetBorderColor_Proxy(
    IVMRWindowlessControl9* This,
    COLORREF *lpClr);
void __RPC_STUB IVMRWindowlessControl9_GetBorderColor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IVMRWindowlessControl9_INTERFACE_DEFINED__ */

#ifndef __IVMRImageCompositor9_FWD_DEFINED__
#define __IVMRImageCompositor9_FWD_DEFINED__
typedef interface IVMRImageCompositor9 IVMRImageCompositor9;
#endif

#ifndef __IVMRFilterConfig9_FWD_DEFINED__
#define __IVMRFilterConfig9_FWD_DEFINED__
typedef interface IVMRFilterConfig9 IVMRFilterConfig9;
#endif

/*****************************************************************************
 * IVMRFilterConfig9 interface
 */
#ifndef __IVMRFilterConfig9_INTERFACE_DEFINED__
#define __IVMRFilterConfig9_INTERFACE_DEFINED__

DEFINE_GUID(IID_IVMRFilterConfig9, 0x5a804648, 0x4f66, 0x4867, 0x9c,0x43, 0x4f,0x5c,0x82,0x2c,0xf1,0xb8);
#if defined(__cplusplus) && !defined(CINTERFACE)
interface IVMRFilterConfig9 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetImageCompositor(
        IVMRImageCompositor9 *lpVMRImgCompositor) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetNumberOfStreams(
        DWORD dwMaxStreams) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNumberOfStreams(
        DWORD *pdwMaxStreams) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetRenderingPrefs(
        DWORD dwRenderFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRenderingPrefs(
        DWORD *pdwRenderFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetRenderingMode(
        DWORD Mode) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRenderingMode(
        DWORD *pMode) = 0;

};
#else
typedef struct IVMRFilterConfig9Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IVMRFilterConfig9* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IVMRFilterConfig9* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IVMRFilterConfig9* This);

    /*** IVMRFilterConfig9 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetImageCompositor)(
        IVMRFilterConfig9* This,
        IVMRImageCompositor9 *lpVMRImgCompositor);

    HRESULT (STDMETHODCALLTYPE *SetNumberOfStreams)(
        IVMRFilterConfig9* This,
        DWORD dwMaxStreams);

    HRESULT (STDMETHODCALLTYPE *GetNumberOfStreams)(
        IVMRFilterConfig9* This,
        DWORD *pdwMaxStreams);

    HRESULT (STDMETHODCALLTYPE *SetRenderingPrefs)(
        IVMRFilterConfig9* This,
        DWORD dwRenderFlags);

    HRESULT (STDMETHODCALLTYPE *GetRenderingPrefs)(
        IVMRFilterConfig9* This,
        DWORD *pdwRenderFlags);

    HRESULT (STDMETHODCALLTYPE *SetRenderingMode)(
        IVMRFilterConfig9* This,
        DWORD Mode);

    HRESULT (STDMETHODCALLTYPE *GetRenderingMode)(
        IVMRFilterConfig9* This,
        DWORD *pMode);

    END_INTERFACE
} IVMRFilterConfig9Vtbl;
interface IVMRFilterConfig9 {
    CONST_VTBL IVMRFilterConfig9Vtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IVMRFilterConfig9_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IVMRFilterConfig9_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IVMRFilterConfig9_Release(p) (p)->lpVtbl->Release(p)
/*** IVMRFilterConfig9 methods ***/
#define IVMRFilterConfig9_SetImageCompositor(p,a) (p)->lpVtbl->SetImageCompositor(p,a)
#define IVMRFilterConfig9_SetNumberOfStreams(p,a) (p)->lpVtbl->SetNumberOfStreams(p,a)
#define IVMRFilterConfig9_GetNumberOfStreams(p,a) (p)->lpVtbl->GetNumberOfStreams(p,a)
#define IVMRFilterConfig9_SetRenderingPrefs(p,a) (p)->lpVtbl->SetRenderingPrefs(p,a)
#define IVMRFilterConfig9_GetRenderingPrefs(p,a) (p)->lpVtbl->GetRenderingPrefs(p,a)
#define IVMRFilterConfig9_SetRenderingMode(p,a) (p)->lpVtbl->SetRenderingMode(p,a)
#define IVMRFilterConfig9_GetRenderingMode(p,a) (p)->lpVtbl->GetRenderingMode(p,a)
#endif

#endif

HRESULT CALLBACK IVMRFilterConfig9_SetImageCompositor_Proxy(
    IVMRFilterConfig9* This,
    IVMRImageCompositor9 *lpVMRImgCompositor);
void __RPC_STUB IVMRFilterConfig9_SetImageCompositor_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_SetNumberOfStreams_Proxy(
    IVMRFilterConfig9* This,
    DWORD dwMaxStreams);
void __RPC_STUB IVMRFilterConfig9_SetNumberOfStreams_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_GetNumberOfStreams_Proxy(
    IVMRFilterConfig9* This,
    DWORD *pdwMaxStreams);
void __RPC_STUB IVMRFilterConfig9_GetNumberOfStreams_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_SetRenderingPrefs_Proxy(
    IVMRFilterConfig9* This,
    DWORD dwRenderFlags);
void __RPC_STUB IVMRFilterConfig9_SetRenderingPrefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_GetRenderingPrefs_Proxy(
    IVMRFilterConfig9* This,
    DWORD *pdwRenderFlags);
void __RPC_STUB IVMRFilterConfig9_GetRenderingPrefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_SetRenderingMode_Proxy(
    IVMRFilterConfig9* This,
    DWORD Mode);
void __RPC_STUB IVMRFilterConfig9_SetRenderingMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRFilterConfig9_GetRenderingMode_Proxy(
    IVMRFilterConfig9* This,
    DWORD *pMode);
void __RPC_STUB IVMRFilterConfig9_GetRenderingMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IVMRFilterConfig9_INTERFACE_DEFINED__ */

#ifndef __IVMRMixerControl9_FWD_DEFINED__
#define __IVMRMixerControl9_FWD_DEFINED__
typedef interface IVMRMixerControl9 IVMRMixerControl9;
#endif

/*****************************************************************************
 * IVMRMixerControl9 interface
 */
#ifndef __IVMRMixerControl9_INTERFACE_DEFINED__
#define __IVMRMixerControl9_INTERFACE_DEFINED__

DEFINE_GUID(IID_IVMRMixerControl9, 0x1a777eaa, 0x47c8, 0x4930, 0xb2,0xc9, 0x8f,0xee,0x1c,0x1b,0x0f,0x3b);
#if defined(__cplusplus) && !defined(CINTERFACE)
interface IVMRMixerControl9 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetAlpha(
        DWORD dwStreamID,
        float Alpha) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAlpha(
        DWORD dwStreamID,
        float *pAlpha) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetZOrder(
        DWORD dwStreamID,
        DWORD dwZ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetZOrder(
        DWORD dwStreamID,
        DWORD *pZ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetOutputRect(
        DWORD dwStreamID,
        const VMR9NormalizedRect *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetOutputRect(
        DWORD dwStreamID,
        VMR9NormalizedRect *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBackgroundClr(
        COLORREF ClrBkg) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBackgroundClr(
        COLORREF *lpClrBkg) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetMixingPrefs(
        DWORD dwMixerPrefs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMixingPrefs(
        DWORD *pdwMixerPrefs) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetProcAmpControl(
        DWORD dwStreamID,
        VMR9ProcAmpControl *lpClrControl) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProcAmpControl(
        DWORD dwStreamID,
        VMR9ProcAmpControl *lpClrControl) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProcAmpControlRange(
        DWORD dwStreamID,
        VMR9ProcAmpControlRange *lpClrControl) = 0;

};
#else
typedef struct IVMRMixerControl9Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IVMRMixerControl9* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IVMRMixerControl9* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IVMRMixerControl9* This);

    /*** IVMRMixerControl9 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetAlpha)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        float Alpha);

    HRESULT (STDMETHODCALLTYPE *GetAlpha)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        float *pAlpha);

    HRESULT (STDMETHODCALLTYPE *SetZOrder)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        DWORD dwZ);

    HRESULT (STDMETHODCALLTYPE *GetZOrder)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        DWORD *pZ);

    HRESULT (STDMETHODCALLTYPE *SetOutputRect)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        const VMR9NormalizedRect *pRect);

    HRESULT (STDMETHODCALLTYPE *GetOutputRect)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        VMR9NormalizedRect *pRect);

    HRESULT (STDMETHODCALLTYPE *SetBackgroundClr)(
        IVMRMixerControl9* This,
        COLORREF ClrBkg);

    HRESULT (STDMETHODCALLTYPE *GetBackgroundClr)(
        IVMRMixerControl9* This,
        COLORREF *lpClrBkg);

    HRESULT (STDMETHODCALLTYPE *SetMixingPrefs)(
        IVMRMixerControl9* This,
        DWORD dwMixerPrefs);

    HRESULT (STDMETHODCALLTYPE *GetMixingPrefs)(
        IVMRMixerControl9* This,
        DWORD *pdwMixerPrefs);

    HRESULT (STDMETHODCALLTYPE *SetProcAmpControl)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        VMR9ProcAmpControl *lpClrControl);

    HRESULT (STDMETHODCALLTYPE *GetProcAmpControl)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        VMR9ProcAmpControl *lpClrControl);

    HRESULT (STDMETHODCALLTYPE *GetProcAmpControlRange)(
        IVMRMixerControl9* This,
        DWORD dwStreamID,
        VMR9ProcAmpControlRange *lpClrControl);

    END_INTERFACE
} IVMRMixerControl9Vtbl;
interface IVMRMixerControl9 {
    CONST_VTBL IVMRMixerControl9Vtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IVMRMixerControl9_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IVMRMixerControl9_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IVMRMixerControl9_Release(p) (p)->lpVtbl->Release(p)
/*** IVMRMixerControl9 methods ***/
#define IVMRMixerControl9_SetAlpha(p,a,b) (p)->lpVtbl->SetAlpha(p,a,b)
#define IVMRMixerControl9_GetAlpha(p,a,b) (p)->lpVtbl->GetAlpha(p,a,b)
#define IVMRMixerControl9_SetZOrder(p,a,b) (p)->lpVtbl->SetZOrder(p,a,b)
#define IVMRMixerControl9_GetZOrder(p,a,b) (p)->lpVtbl->GetZOrder(p,a,b)
#define IVMRMixerControl9_SetOutputRect(p,a,b) (p)->lpVtbl->SetOutputRect(p,a,b)
#define IVMRMixerControl9_GetOutputRect(p,a,b) (p)->lpVtbl->GetOutputRect(p,a,b)
#define IVMRMixerControl9_SetBackgroundClr(p,a) (p)->lpVtbl->SetBackgroundClr(p,a)
#define IVMRMixerControl9_GetBackgroundClr(p,a) (p)->lpVtbl->GetBackgroundClr(p,a)
#define IVMRMixerControl9_SetMixingPrefs(p,a) (p)->lpVtbl->SetMixingPrefs(p,a)
#define IVMRMixerControl9_GetMixingPrefs(p,a) (p)->lpVtbl->GetMixingPrefs(p,a)
#define IVMRMixerControl9_SetProcAmpControl(p,a,b) (p)->lpVtbl->SetProcAmpControl(p,a,b)
#define IVMRMixerControl9_GetProcAmpControl(p,a,b) (p)->lpVtbl->GetProcAmpControl(p,a,b)
#define IVMRMixerControl9_GetProcAmpControlRange(p,a,b) (p)->lpVtbl->GetProcAmpControlRange(p,a,b)
#endif

#endif

HRESULT CALLBACK IVMRMixerControl9_SetAlpha_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    float Alpha);
void __RPC_STUB IVMRMixerControl9_SetAlpha_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetAlpha_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    float *pAlpha);
void __RPC_STUB IVMRMixerControl9_GetAlpha_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_SetZOrder_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    DWORD dwZ);
void __RPC_STUB IVMRMixerControl9_SetZOrder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetZOrder_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    DWORD *pZ);
void __RPC_STUB IVMRMixerControl9_GetZOrder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_SetOutputRect_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    const VMR9NormalizedRect *pRect);
void __RPC_STUB IVMRMixerControl9_SetOutputRect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetOutputRect_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    VMR9NormalizedRect *pRect);
void __RPC_STUB IVMRMixerControl9_GetOutputRect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_SetBackgroundClr_Proxy(
    IVMRMixerControl9* This,
    COLORREF ClrBkg);
void __RPC_STUB IVMRMixerControl9_SetBackgroundClr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetBackgroundClr_Proxy(
    IVMRMixerControl9* This,
    COLORREF *lpClrBkg);
void __RPC_STUB IVMRMixerControl9_GetBackgroundClr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_SetMixingPrefs_Proxy(
    IVMRMixerControl9* This,
    DWORD dwMixerPrefs);
void __RPC_STUB IVMRMixerControl9_SetMixingPrefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetMixingPrefs_Proxy(
    IVMRMixerControl9* This,
    DWORD *pdwMixerPrefs);
void __RPC_STUB IVMRMixerControl9_GetMixingPrefs_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_SetProcAmpControl_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    VMR9ProcAmpControl *lpClrControl);
void __RPC_STUB IVMRMixerControl9_SetProcAmpControl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetProcAmpControl_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    VMR9ProcAmpControl *lpClrControl);
void __RPC_STUB IVMRMixerControl9_GetProcAmpControl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IVMRMixerControl9_GetProcAmpControlRange_Proxy(
    IVMRMixerControl9* This,
    DWORD dwStreamID,
    VMR9ProcAmpControlRange *lpClrControl);
void __RPC_STUB IVMRMixerControl9_GetProcAmpControlRange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IVMRMixerControl9_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER HWND_UserSize     (ULONG *, ULONG, HWND *);
unsigned char * __RPC_USER HWND_UserMarshal  (ULONG *, unsigned char *, HWND *);
unsigned char * __RPC_USER HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void            __RPC_USER HWND_UserFree     (ULONG *, HWND *);
ULONG           __RPC_USER HDC_UserSize     (ULONG *, ULONG, HDC *);
unsigned char * __RPC_USER HDC_UserMarshal  (ULONG *, unsigned char *, HDC *);
unsigned char * __RPC_USER HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void            __RPC_USER HDC_UserFree     (ULONG *, HDC *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif
#endif /* __WIDL_VMR9_H */
